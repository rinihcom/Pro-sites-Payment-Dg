<?php/** * Author : Fahri A * Author URI: http://dizduz.com * License: GPL2 */class psts_dg_manage{	public $wpdb;		public function __construct() {		global $wpdb;		$this->wpdb = $wpdb;	}			public function manage(){		// Edit screen		$messages = array();		$wp_list_table = new psts_dg_manage_lists();		?>		<div class="wrap">			<?php screen_icon( 'post' ); ?>			<h2>				Purchase Lists			</h2>						<p>				<b>IPN URL</b> : <?php echo site_url().'/wp-admin/admin-ajax.php?action=psts_dg_ipn' ?>			</p>						<form id="my-dev-form" action="" method="get">				<?php $wp_list_table->search_box( __( 'Search all Purchase' ), 'psts' ); ?>				<input type="hidden" name="page" value="<?php echo esc_attr( $plugin_page ); ?>" />				<?php $wp_list_table->prepare_items(); ?>				<?php $wp_list_table->display(); ?>			</form>					</div>		<?php	}}$psts_list = new psts_dg_manage;/** * List table class for the Activity component admin page. * */if(!class_exists('WP_List_Table')) :    require_once(ABSPATH . 'wp-admin/includes/class-wp-list-table.php');endif;class psts_dg_manage_lists extends WP_List_Table {	/**	 * What type of view is being displayed? e.g. "All", "Pending", "Approved", "Spam"...	 *	*/	public $view = 'all';	/**	 * Store User ID	 *	 */	protected $user_id;	/**	 * Constructor	 *	 */	public function __construct() {		// Define singular and plural labels, as well as whether we support AJAX.		parent::__construct( array(			'ajax'     => false,			'plural'   => 'Purchases',			'singular' => 'Purchase',		) );	}			/**	 * Define the columns that are going to be used in the table	 * @return array $columns, the array of columns to use with the table	 */	function get_columns() {		return $columns= array(			'dg_id'  => 'ID',			'transaction_id'=>__('Transaction ID'),			'transaction_amount'=>__('Amount'),			'transaction_date'=>__('Date'),			'transaction_type'=>__('Type'),			'product_name'=>__('Product Name'),			'product_id'=>__('Product ID'),			'buyer_first_name'=>__('First Name'),			'buyer_last_name'=>__('Last Name'),			'buyer_email'=>__('Email'),		);	}		public function get_sortable_columns() {		$sortable_columns = array(            'transaction_id'     => array('transaction_id',true),     //true means its already sorted            'transaction_date'    => array('transaction_date',false),            'transaction_amount'    => array('transaction_amount',false),            'transaction_type'  => array('transaction_type',false)        );        return $sortable_columns;	}			function process_bulk_action() {                //Detect when a bulk action is being triggered...        if( 'delete'===$this->current_action() ) {            wp_die('Items deleted (or they would be if we had items to delete)!');        }            }			function column_start_time($item){            }		function column_default($item, $column_name){        return $item[$column_name];    }		function get_bulk_actions() {        $actions = array(            'delete'    => 'Delete',        );        return $actions;    }			/**	 * Prepare the table with different parameters, pagination, columns and table elements	 */	function prepare_items() {		global $wpdb, $_wp_column_headers;		$screen = get_current_screen();		/* -- Preparing your query -- */				/** Get data dev from usermeta */		$data = array();		$user_query = "SELECT * FROM ".$wpdb->base_prefix."pro_sites_dealguardian";		$data = $wpdb->get_results($user_query,ARRAY_A);				/* -- Ordering parameters -- */		//Parameters that are going to be used to order the result		$orderby = !empty($_GET["orderby"]) ? mysql_real_escape_string($_GET["orderby"]) : 'ASC';		$order = !empty($_GET["order"]) ? mysql_real_escape_string($_GET["order"]) : '';		if(!empty($orderby) & !empty($order)){ $query.=' ORDER BY '.$orderby.' '.$order; }		$per_page = 8;        $columns = $this->get_columns();        $hidden = array();        $sortable = $this->get_sortable_columns();		        $this->_column_headers = array($columns, $hidden, $sortable);                        /**         * Optional. You can handle your bulk actions however you see fit. In this         * case, we'll handle them within our package just to keep things clean.         */        $this->process_bulk_action();		        //$data = $wpdb->get_results($query,ARRAY_A);                        $current_page = $this->get_pagenum();        $total_items = count($data);		        $data = array_slice($data,(($current_page-1)*$per_page),$per_page);		        $this->items = $data;                        /**         * REQUIRED. We also have to register our pagination options & calculations.         */        $this->set_pagination_args( array(            'total_items' => $total_items,                  //WE have to calculate the total number of items            'per_page'    => $per_page,                     //WE have to determine how many items to show on a page            'total_pages' => ceil($total_items/$per_page)   //WE have to calculate the total number of pages        ) );    }}?>